[{"C:\\Users\\martti\\Desktop\\rhk\\src\\index.js":"1","C:\\Users\\martti\\Desktop\\rhk\\src\\App.js":"2","C:\\Users\\martti\\Desktop\\rhk\\src\\reportWebVitals.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":4149,"mtime":1611242111944,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"sk7sx7",{"filePath":"11","messages":"12","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"C:\\Users\\martti\\Desktop\\rhk\\src\\index.js",[],["16","17"],"C:\\Users\\martti\\Desktop\\rhk\\src\\App.js",["18","19","20","21"],"import React, { useState, useEffect, Fragment } from 'react'\nimport './App.css';\nimport axios from 'axios'\nimport  Container  from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport { Table } from 'react-bootstrap'\nimport serebryanka from './sere.png'\nimport rhk from './rhk.png'\nimport members from './members.gif'\n\nfunction App() {\n  const [matches, setMatches] = useState([])\n\n  const pelaajat = [\"penaa\", \"mazze\", \"raksuu\", \"nykzi\", \"kallu\", \"tuomasK\"]\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await axios.get(\"https://aq2rhk.herokuapp.com\")\n      setMatches(response.data)\n      console.log(response.data)\n      \n    }\n    fetchData();\n  }, []);\n  \n  const getColor = (tilanne) => {\n    const score = tilanne.split(\"-\")\n\n    if(score[0] === score[1]){\n      return (\"yellow\")\n    }\n    else if ( score[0] > score[1]){\n      return (\"green\")\n    }\n    else { return (\"red\")}\n  }\n\n  const winPercent = (matsit) => {\n    let wins = 0\n    matsit.forEach(matsi => {\n      const score = matsi.tilanne.split(\"-\")\n      if ( score[0] > score[1]){\n        wins++\n      }\n    })\n    const percentage = (wins / matsit.length * 100).toFixed(3)\n    return `${percentage}`\n  }\n\n\n  return (\n    <div>\n    <Container fluid style={{backgroundColor: \"black\"}}>\n      <Row>\n       <Col style={{marginLeft: 100}}>\n       <p className=\"html-rainbow-text\" style={{textAlign: \"center\"}}>\n       <h1 className=\"rainbow\">total matches: {matches.length}</h1>\n       </p>\n       <h3 style={{color: \"green\", textAlign: \"center\"}} colSpan={1}>\n       <b>win %: &nbsp;{winPercent(matches)} </b>\n       </h3>\n          <Table style={{textAlign: \"center\"}}>\n            <thead>\n              <tr style={{color: \"white\"}}>\n                <th style={{borderTop: 0, borderBottom: 0}}>#</th>\n                <th style={{borderTop: 0, borderBottom: 0}}>style</th>\n                <th style={{borderTop: 0, borderBottom: 0}}>opponent</th>\n                <th style={{borderTop: 0, borderBottom: 0}}>score</th>\n                <th style={{borderTop: 0, borderBottom: 0}}>date</th>\n              </tr>\n              </thead>\n              <tbody>\n                {matches.map((match, i) => \n                    <tr key={i} style={{color: getColor(match.tilanne)}}>\n                      <td style={{borderTop: 0}}>\n                        {i + 1}\n                      </td>\n                      <td style={{borderTop: 0}}>\n                        {match.style}\n                      </td>\n                      <td style={{borderTop: 0}}>\n                        {match.opponent}\n                      </td>\n                      <td style={{borderTop: 0}}>\n                        {match.tilanne}\n                      </td>\n                      <td style={{borderTop: 0}}>\n                        {`${(new Date(match.date)).getDate()}/${(new Date(match.date)).getMonth() + 1}/${(new Date(match.date)).getFullYear()}`}\n                      </td>\n                    </tr>\n                  )}\n              </tbody>\n          </Table>\n       </Col>\n       <Col style={{textAlign: \"center\"}}><div><img src={rhk}></img></div>\n       <div id=\"picturediv\">\n         <div className=\"image-container\" style={{marginTop: 30}}>\n          <img src={members}/>\n          </div>\n                  <table id=\"pelaajattable\" style={{width: \"100%\", marginTop: 30, color: \"white\"}}>\n                    <tbody style={{width: \"100%\"}}>\n                      {pelaajat.map((pelaaja, i) => \n                          <tr key={i} style={{textAlign: \"center\", verticalAlign: \"middle\", width: \"100%\", marginTop: \"10px\"}}>\n                            <td style={{textAlign: \"center\", verticalAlign: \"middle\", width: \"100%\"}}>\n                              {pelaaja}\n                            </td>\n                          </tr>\n                        )}\n                    </tbody>\n                  </table>\n         </div>\n         <div id=\"stage\" style={{marginTop:60}}><img id=\"spinner\" src={serebryanka}></img></div></Col>\n    </Row>\n    </Container>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\martti\\Desktop\\rhk\\src\\reportWebVitals.js",[],{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","severity":1,"message":"27","line":1,"column":38,"nodeType":"28","messageId":"29","endLine":1,"endColumn":46},{"ruleId":"30","severity":1,"message":"31","line":96,"column":48,"nodeType":"32","endLine":96,"endColumn":63},{"ruleId":"30","severity":1,"message":"31","line":99,"column":11,"nodeType":"32","endLine":99,"endColumn":31},{"ruleId":"30","severity":1,"message":"31","line":113,"column":49,"nodeType":"32","endLine":113,"endColumn":85},"no-native-reassign",["33"],"no-negated-in-lhs",["34"],"no-unused-vars","'Fragment' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]