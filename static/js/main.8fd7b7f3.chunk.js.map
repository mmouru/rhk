{"version":3,"sources":["rhk.png","members.gif","sere0.png","App.js","reportWebVitals.js","index.js"],"names":["App","useState","matches","setMatches","serebryanka","useEffect","a","axios","get","response","data","console","log","fetchData","getColor","tilanne","score","split","Container","fluid","style","backgroundColor","Row","Col","marginLeft","textAlign","className","length","color","mathces","voitot","forEach","match","parseInt","totalWins","häviöt","totalLoses","colSpan","matsit","wins","matsi","percentage","toFixed","winPercent","Table","borderTop","borderColor","sort","b","Date","date","getTime","map","i","opponent","getDate","getMonth","getFullYear","src","rhk","id","marginTop","members","width","pelaaja","verticalAlign","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8fd7b7f3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/rhk.8399ddda.png\";","export default __webpack_public_path__ + \"static/media/members.82f99f31.gif\";","export default __webpack_public_path__ + \"static/media/sere0.24a037fa.png\";","import React, { useState, useEffect, Fragment } from 'react'\nimport './App.css';\nimport axios from 'axios'\nimport  Container  from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport { Table } from 'react-bootstrap' \nimport rhk from './rhk.png'\nimport members from './members.gif'\nimport serebryanka from './sere0.png'\n\n\nfunction App() {\n  const [matches, setMatches] = useState([])\n\n  const pelaajat = [\"penaa\", \"mazze\", \"raksuu\", \"nykzi\", \"kallu\", \"tuomasK (trilu)\"]\n\n  const [kuva, setKuva] = useState(serebryanka)\n\n  const [number, setNumber] = useState(0)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await axios.get(\"https://aq2rhk.herokuapp.com\")\n      setMatches(response.data)\n      console.log(response.data)\n      \n    }\n    fetchData();\n  }, []);\n\n  const totalWins = (mathces) => {\n    let voitot = 0\n    matches.forEach(match => {\n      const score = match.tilanne.split(\"-\")\n        voitot += parseInt(score[0])\n    })\n    return voitot\n  }\n\n  const totalLoses = (mathces) => {\n    let häviöt = 0\n    matches.forEach(match => {\n      const score = match.tilanne.split(\"-\")\n        häviöt += parseInt(score[1])\n    })\n    return häviöt\n  }\n  \n  const getColor = (tilanne) => {\n    const score = tilanne.split(\"-\")\n\n    if(score[0] === score[1]){\n      return (\"yellow\")\n    }\n    else if ( score[0] > score[1]){\n      return (\"green\")\n    }\n    else { return (\"red\")}\n  }\n\n  const winPercent = (matsit) => {\n    let wins = 0\n    matsit.forEach(matsi => {\n      const score = matsi.tilanne.split(\"-\")\n      if ( score[0] > score[1]){\n        wins++\n      }\n    })\n    const percentage = (wins / matsit.length * 100).toFixed(3)\n    return `${percentage}`\n  }\n  \n  return (\n    <div>\n    <Container fluid style={{backgroundColor: \"black\"}}>\n      <Row>\n       <Col style={{marginLeft: 100, textAlign: \"center\"}}>\n       <p className=\"html-rainbow-text\">\n       <h1 className=\"rainbow\">clanwars: {matches.length}</h1>\n       </p>\n       <p style={{color: \"white\"}}>\n         total rounds <span style={{color: \"green\"}}>{totalWins()}</span> - <span style={{color: \"red\"}}>{totalLoses()}</span>\n       </p>\n       <h3 style={{color: \"green\", textAlign: \"center\"}} colSpan={1}>\n       <b>win %: &nbsp;{winPercent(matches)} </b>\n       </h3>\n          <Table className=\"matsitTable\" style={{textAlign: \"center\"}}>\n            <thead>\n              <tr style={{color: \"white\"}}>\n                <th style={{borderTop: 0, borderColor: \"black\"}}>#</th>\n                <th style={{borderTop: 0, borderColor: \"black\"}}>style</th>\n                <th style={{borderTop: 0, borderColor: \"black\"}}>tag</th>\n                <th style={{borderTop: 0, borderColor: \"black\"}}>score</th>\n                <th style={{borderTop: 0, borderColor: \"black\"}}>date</th>\n              </tr>\n              </thead>\n              <tbody>\n                {matches.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()).map((match, i) => \n                    <tr key={i} style={{color: \"white\"}}>\n                      <td style={{borderColor: \"black\"}}>\n                        {matches.length - i}\n                      </td>\n                      <td style={{borderColor: \"black\"}}>\n                        {match.style}\n                      </td>\n                      <td style={{borderColor: \"black\"}}>\n                        {match.opponent}\n                      </td>\n                      <td style={{borderColor: \"black\", color: getColor(match.tilanne)}}>\n                        {match.tilanne}\n                      </td>\n                      <td style={{borderColor: \"black\"}}>\n                        {`${(new Date(match.date)).getDate()}.${(new Date(match.date)).getMonth() + 1}.${(new Date(match.date)).getFullYear()}`}\n                      </td>\n                    </tr>\n                  )}\n              </tbody>\n          </Table>\n       </Col>\n       <Col style={{textAlign: \"center\"}}><div><img src={rhk}></img></div>\n       <div id=\"picturediv\">\n         <div className=\"image-container\" style={{marginTop: 30}}>\n          <img src={members}/>\n          </div>\n                  <table id=\"pelaajattable\" style={{width: \"100%\", marginTop: 30, color: \"white\"}}>\n                    <tbody style={{width: \"100%\"}}>\n                      {pelaajat.map((pelaaja, i) => \n                          <tr key={i} style={{textAlign: \"center\", verticalAlign: \"middle\", width: \"100%\", marginTop: \"10px\"}}>\n                            <td style={{textAlign: \"center\", verticalAlign: \"middle\", width: \"100%\"}}>\n                              {pelaaja}\n                            </td>\n                          </tr>\n                        )}\n                    </tbody>\n                  </table>\n         </div>\n         <div id=\"stage\" style={{marginTop:60}}><img id=\"spinner\" src={serebryanka}></img></div></Col>\n    </Row>\n    </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}